@page "{budgetId}"
@using Allocations.Web.ApiClient
@using Allocations.Web.ApiClient.Models
@using Allocations.Web.Pages.Specifications
@using ApiClient.Models
@model Allocations.Web.Pages.Specifications.TestScenarioModel

<div class="row">
    <div class="col-xs-8">
        <h2>@Model.Product.Name</h2>
        <p>@Model.Product.Description</p>
        <h1 class="heading-xlarge">Create new scenario</h1>
    </div>
</div>
<form method="post">
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <label for="name">Name of the scenario</label>
                <input asp-for="TestScenario.Id" type="hidden" >
                <input asp-for="TestScenario.Name" class="form-control" id="name" >
            </div>
        </div></div><!-- end of .row -->  
    


                
    @for(var i = 0; i < Model.TestScenario.GivenSteps.Count;i++)
    {
        var step = Model.TestScenario.GivenSteps[i];
        <div class="row" hidden="@(i > 0)">
            <div class="col-md-11">
                @if (i == 0)
                {
                    <span>Given</span>
                }
                else
                {
                    <span>And</span>
                }
            </div>  
        </div>


        <div class="row" hidden="@(i > 0)">

            <div class="col-md-5">
                <input type="hidden" name="TestScenario.GivenSteps[@i].Dataset" value="???"/>
                <select class="form-control" name="TestScenario.GivenSteps[@i].Field">
                    <option></option>
                    @foreach (var dataset in Model.Budget.DatasetDefinitions)
                    {
                        <optgroup label="@dataset.Name">
                            @foreach (var fieldDefinition in dataset.FieldDefinitions)
                            {
                                var compositeKey = string.Format("{0}|{1}", dataset.Id, fieldDefinition.Id);
                                <option selected="@(compositeKey == step.Field)" value="@compositeKey">@fieldDefinition.Name</option>
                            }
                        </optgroup>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-control" name="TestScenario.GivenSteps[@i].Operator">
                    @foreach (var op in Model.Operators)
                    {
                        <option selected="@(op == step.Operator)" value="@op">@op.GetDisplayText()</option>

                    }
                </select>
            </div>
            <div class="col-md-3">
                <input class="form-control" name="TestScenario.GivenSteps[@i].Value" type="text" value="@step.Value"/>
            </div>
            <div class="col-md-1">
                <i class="glyphicon glyphicon-remove"></i>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-12">
            <a><i class="glyphicon glyphicon-plus"></i> Add new clause</a>
        </div>
    </div>

                
    @for(var i = 0; i < Model.TestScenario.ThenSteps.Count;i++)
    {
        var step = Model.TestScenario.ThenSteps[i];
        <div class="row" hidden="@(i > 0)">
            <div class="col-md-11">
                @if (i == 0)
                {
                    <span>Then</span>
                }
                else
                {
                    <span>And</span>
                }
            </div>  
        </div>
        <div class="row" hidden="@(i > 0)">

            <div class="col-md-5">
                <select class="form-control" name="TestScenario.GivenSteps[@i].Field">
                    <option></option>
                    <option selected="selected" value="product">@Model.Product.Name</option>
                    @*@foreach (var dataset in Model.Budget.DatasetDefinitions)
                    {
                        <optgroup label="@dataset.Name">
                            @foreach (var fieldDefinition in dataset.FieldDefinitions)
                            {
                                var compositeKey = string.Format("{0}|{1}", dataset.Id, fieldDefinition.Id);
                                <option disabled="disabled" value="@compositeKey">@fieldDefinition.Name</option>
                            }
                        </optgroup>
                    }*@
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-control" name="TestScenario.ThenSteps[@i].Operator">
                    @foreach (var op in Model.Operators)
                    {
                        <option selected="@(op == step.Operator)" value="@op">@op.GetDisplayText()</option>

                    }
                </select>
            </div>
            <div class="col-md-3">
                <input class="form-control" name="TestScenario.ThenSteps[@i].Value" type="text" value="@step.Value"/>
            </div>
            <div class="col-md-1">
                @if (i > 0)
                {
                    <i class="glyphicon glyphicon-remove"></i>
                }

            </div>

        </div>
    }
    <div class="row">
        <div class="col-md-12">
            <a><i class="glyphicon glyphicon-plus"></i> Add new clause</a>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div asp-validation-summary="All"></div>
            <button type="submit" class="btn btn-default">Run Test</button>
        </div>
    </div>

</form>
<div class="row">
    <div class="col-md-12">
        @if (Model.Preview != null)
        {


            <h2>Results</h2>

            @if (Model.Preview.CompilerOutput.Success)
             {
                 <h3>Compilation succeeded</h3>
             }
             else
             {
                 <h4>Compilation failed</h4>
             }
            <table class="table table-condensed">

                @foreach (var diagostic in Model?.Preview?.CompilerOutput?.CompilerMessages.Where(x => x.Severity != Severity.Hidden))
                {
                    <tr>
                        <td>@diagostic.Severity</td>
                        <td>@diagostic.Message</td>
                    </tr>
                }

            </table>
            <h3>Test Results</h3>
            @foreach (var tr in Model.Preview.TestResults)
             {
                 <h4>@tr.Provider.Name</h4>
                 @foreach (var scenarioResult in tr.ScenarioResults.GroupBy(x => x.Product.Name))
                  {
                      <h5>@scenarioResult.Key @scenarioResult.First().ProductValue.ToString()</h5>
                      foreach (var scenario in scenarioResult)
                      {
                          <p>@scenario.Scenario?.Name @scenario.TestResult</p>
                      }
                  }
             }
        }
    </div>
</div>
